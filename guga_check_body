(function () {
  'use strict';

  if (!$response) {
    console.log('❌ $response 未定义');
    $done({});
    return;
  }

  let bodyText = '';

  try {
    if (typeof $response.body === 'string') {
      // 情况1: 正常 string
      bodyText = $response.body;
      console.log('✅ $response.body 是 string, 长度:', bodyText.length);
    } else if ($response.body) {
      // 情况2: NSData / ArrayBuffer，需要转成 string
      try {
        // 先转成 Uint8Array，再转 UTF-8
        let u8 = new Uint8Array($response.body);
        bodyText = new TextDecoder('utf-8').decode(u8);
        console.log('✅ $response.body 已通过 TextDecoder 转换, 长度:', bodyText.length);
      } catch (e) {
        console.log('❌ TextDecoder 转换失败:', e.message);
      }
    } else if ($response.rawBody) {
      // 情况3: rawBody 是 base64
      try {
        let b64 = $response.rawBody;
        let bin = atob(b64);
        let arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; i++) arr[i] = bin.charCodeAt(i);
        bodyText = new TextDecoder('utf-8').decode(arr);
        console.log('✅ 从 rawBody(base64) 解码, 长度:', bodyText.length);
      } catch (e) {
        console.log('❌ rawBody 解码失败:', e.message);
      }
    }
  } catch (err) {
    console.log('❌ 处理 body 出错:', err.message);
  }

  if (bodyText) {
    try {
      let obj = JSON.parse(bodyText);
      console.log('解析成功, code=', obj.code, ' level=', obj.data && obj.data.level);

      if (obj.code === 200 && obj.data) {
        obj.data.level = 1;
        obj.data.trialDate = obj.data.trialDate || Math.floor(Date.now() / 1000);
        console.log('✨ 修改后 level:', obj.data.level);
        $done({ body: JSON.stringify(obj) });
        return;
      }
    } catch (e) {
      console.log('⚠️ JSON.parse 出错:', e.message);
    }
  } else {
    console.log('⚠️ bodyText 为空');
  }

  // 默认返回原始
  $done({ body: bodyText || '{}' });
})();
